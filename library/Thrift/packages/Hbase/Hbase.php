<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Hbase/Hbase_types.php';

interface HbaseIf {
  public function enableTable($tableName);
  public function disableTable($tableName);
  public function isTableEnabled($tableName);
  public function compact($tableNameOrRegionName);
  public function majorCompact($tableNameOrRegionName);
  public function getTableNames();
  public function getColumnDescriptors($tableName);
  public function getTableRegions($tableName);
  public function createTable($tableName, $columnFamilies);
  public function deleteTable($tableName);
  public function get($tableName, $row, $column);
  public function getVer($tableName, $row, $column, $numVersions);
  public function getVerTs($tableName, $row, $column, $timestamp, $numVersions);
  public function getRow($tableName, $row);
  public function getRowWithColumns($tableName, $row, $columns);
  public function getRowTs($tableName, $row, $timestamp);
  public function getRowWithColumnsTs($tableName, $row, $columns, $timestamp);
  public function getRows($tableName, $rows);
  public function getRowsWithColumns($tableName, $rows, $columns);
  public function getRowsTs($tableName, $rows, $timestamp);
  public function getRowsWithColumnsTs($tableName, $rows, $columns, $timestamp);
  public function mutateRow($tableName, $row, $mutations);
  public function mutateRowTs($tableName, $row, $mutations, $timestamp);
  public function mutateRows($tableName, $rowBatches);
  public function mutateRowsTs($tableName, $rowBatches, $timestamp);
  public function atomicIncrement($tableName, $row, $column, $value);
  public function deleteAll($tableName, $row, $column);
  public function deleteAllTs($tableName, $row, $column, $timestamp);
  public function deleteAllRow($tableName, $row);
  public function deleteAllRowTs($tableName, $row, $timestamp);
  public function scannerOpen($tableName, $startRow, $columns);
  public function scannerOpenWithStop($tableName, $startRow, $stopRow, $columns);
  public function scannerOpenWithPrefix($tableName, $startAndPrefix, $columns);
  public function scannerOpenTs($tableName, $startRow, $columns, $timestamp);
  public function scannerOpenWithStopTs($tableName, $startRow, $stopRow, $columns, $timestamp);
  public function scannerGet($id);
  public function scannerGetList($id, $nbRows);
  public function scannerClose($id);
}

class HbaseClient implements HbaseIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function enableTable($tableName)
  {
    $this->send_enableTable($tableName);
    $this->recv_enableTable();
  }

  public function send_enableTable($tableName)
  {
    $args = new Hbase_enableTable_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enableTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enableTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enableTable()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_enableTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_enableTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function disableTable($tableName)
  {
    $this->send_disableTable($tableName);
    $this->recv_disableTable();
  }

  public function send_disableTable($tableName)
  {
    $args = new Hbase_disableTable_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'disableTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('disableTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_disableTable()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_disableTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_disableTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function isTableEnabled($tableName)
  {
    $this->send_isTableEnabled($tableName);
    return $this->recv_isTableEnabled();
  }

  public function send_isTableEnabled($tableName)
  {
    $args = new Hbase_isTableEnabled_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'isTableEnabled', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('isTableEnabled', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_isTableEnabled()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_isTableEnabled_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_isTableEnabled_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("isTableEnabled failed: unknown result");
  }

  public function compact($tableNameOrRegionName)
  {
    $this->send_compact($tableNameOrRegionName);
    $this->recv_compact();
  }

  public function send_compact($tableNameOrRegionName)
  {
    $args = new Hbase_compact_args();
    $args->tableNameOrRegionName = $tableNameOrRegionName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'compact', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('compact', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_compact()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_compact_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_compact_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function majorCompact($tableNameOrRegionName)
  {
    $this->send_majorCompact($tableNameOrRegionName);
    $this->recv_majorCompact();
  }

  public function send_majorCompact($tableNameOrRegionName)
  {
    $args = new Hbase_majorCompact_args();
    $args->tableNameOrRegionName = $tableNameOrRegionName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'majorCompact', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('majorCompact', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_majorCompact()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_majorCompact_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_majorCompact_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function getTableNames()
  {
    $this->send_getTableNames();
    return $this->recv_getTableNames();
  }

  public function send_getTableNames()
  {
    $args = new Hbase_getTableNames_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTableNames', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTableNames', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTableNames()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getTableNames_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getTableNames_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getTableNames failed: unknown result");
  }

  public function getColumnDescriptors($tableName)
  {
    $this->send_getColumnDescriptors($tableName);
    return $this->recv_getColumnDescriptors();
  }

  public function send_getColumnDescriptors($tableName)
  {
    $args = new Hbase_getColumnDescriptors_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getColumnDescriptors', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getColumnDescriptors', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getColumnDescriptors()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getColumnDescriptors_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getColumnDescriptors_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getColumnDescriptors failed: unknown result");
  }

  public function getTableRegions($tableName)
  {
    $this->send_getTableRegions($tableName);
    return $this->recv_getTableRegions();
  }

  public function send_getTableRegions($tableName)
  {
    $args = new Hbase_getTableRegions_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTableRegions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTableRegions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTableRegions()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getTableRegions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getTableRegions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getTableRegions failed: unknown result");
  }

  public function createTable($tableName, $columnFamilies)
  {
    $this->send_createTable($tableName, $columnFamilies);
    $this->recv_createTable();
  }

  public function send_createTable($tableName, $columnFamilies)
  {
    $args = new Hbase_createTable_args();
    $args->tableName = $tableName;
    $args->columnFamilies = $columnFamilies;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createTable()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_createTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_createTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    if ($result->exist !== null) {
      throw $result->exist;
    }
    return;
  }

  public function deleteTable($tableName)
  {
    $this->send_deleteTable($tableName);
    $this->recv_deleteTable();
  }

  public function send_deleteTable($tableName)
  {
    $args = new Hbase_deleteTable_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteTable()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_deleteTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_deleteTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function get($tableName, $row, $column)
  {
    $this->send_get($tableName, $row, $column);
    return $this->recv_get();
  }

  public function send_get($tableName, $row, $column)
  {
    $args = new Hbase_get_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->column = $column;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("get failed: unknown result");
  }

  public function getVer($tableName, $row, $column, $numVersions)
  {
    $this->send_getVer($tableName, $row, $column, $numVersions);
    return $this->recv_getVer();
  }

  public function send_getVer($tableName, $row, $column, $numVersions)
  {
    $args = new Hbase_getVer_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->column = $column;
    $args->numVersions = $numVersions;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVer()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getVer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getVer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getVer failed: unknown result");
  }

  public function getVerTs($tableName, $row, $column, $timestamp, $numVersions)
  {
    $this->send_getVerTs($tableName, $row, $column, $timestamp, $numVersions);
    return $this->recv_getVerTs();
  }

  public function send_getVerTs($tableName, $row, $column, $timestamp, $numVersions)
  {
    $args = new Hbase_getVerTs_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->column = $column;
    $args->timestamp = $timestamp;
    $args->numVersions = $numVersions;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVerTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVerTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVerTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getVerTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getVerTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getVerTs failed: unknown result");
  }

  public function getRow($tableName, $row)
  {
    $this->send_getRow($tableName, $row);
    return $this->recv_getRow();
  }

  public function send_getRow($tableName, $row)
  {
    $args = new Hbase_getRow_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRow()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRow failed: unknown result");
  }

  public function getRowWithColumns($tableName, $row, $columns)
  {
    $this->send_getRowWithColumns($tableName, $row, $columns);
    return $this->recv_getRowWithColumns();
  }

  public function send_getRowWithColumns($tableName, $row, $columns)
  {
    $args = new Hbase_getRowWithColumns_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->columns = $columns;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRowWithColumns', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRowWithColumns', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRowWithColumns()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRowWithColumns_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRowWithColumns_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRowWithColumns failed: unknown result");
  }

  public function getRowTs($tableName, $row, $timestamp)
  {
    $this->send_getRowTs($tableName, $row, $timestamp);
    return $this->recv_getRowTs();
  }

  public function send_getRowTs($tableName, $row, $timestamp)
  {
    $args = new Hbase_getRowTs_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRowTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRowTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRowTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRowTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRowTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRowTs failed: unknown result");
  }

  public function getRowWithColumnsTs($tableName, $row, $columns, $timestamp)
  {
    $this->send_getRowWithColumnsTs($tableName, $row, $columns, $timestamp);
    return $this->recv_getRowWithColumnsTs();
  }

  public function send_getRowWithColumnsTs($tableName, $row, $columns, $timestamp)
  {
    $args = new Hbase_getRowWithColumnsTs_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->columns = $columns;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRowWithColumnsTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRowWithColumnsTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRowWithColumnsTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRowWithColumnsTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRowWithColumnsTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRowWithColumnsTs failed: unknown result");
  }

  public function getRows($tableName, $rows)
  {
    $this->send_getRows($tableName, $rows);
    return $this->recv_getRows();
  }

  public function send_getRows($tableName, $rows)
  {
    $args = new Hbase_getRows_args();
    $args->tableName = $tableName;
    $args->rows = $rows;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRows', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRows', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRows()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRows_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRows_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRows failed: unknown result");
  }

  public function getRowsWithColumns($tableName, $rows, $columns)
  {
    $this->send_getRowsWithColumns($tableName, $rows, $columns);
    return $this->recv_getRowsWithColumns();
  }

  public function send_getRowsWithColumns($tableName, $rows, $columns)
  {
    $args = new Hbase_getRowsWithColumns_args();
    $args->tableName = $tableName;
    $args->rows = $rows;
    $args->columns = $columns;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRowsWithColumns', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRowsWithColumns', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRowsWithColumns()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRowsWithColumns_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRowsWithColumns_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRowsWithColumns failed: unknown result");
  }

  public function getRowsTs($tableName, $rows, $timestamp)
  {
    $this->send_getRowsTs($tableName, $rows, $timestamp);
    return $this->recv_getRowsTs();
  }

  public function send_getRowsTs($tableName, $rows, $timestamp)
  {
    $args = new Hbase_getRowsTs_args();
    $args->tableName = $tableName;
    $args->rows = $rows;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRowsTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRowsTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRowsTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRowsTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRowsTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRowsTs failed: unknown result");
  }

  public function getRowsWithColumnsTs($tableName, $rows, $columns, $timestamp)
  {
    $this->send_getRowsWithColumnsTs($tableName, $rows, $columns, $timestamp);
    return $this->recv_getRowsWithColumnsTs();
  }

  public function send_getRowsWithColumnsTs($tableName, $rows, $columns, $timestamp)
  {
    $args = new Hbase_getRowsWithColumnsTs_args();
    $args->tableName = $tableName;
    $args->rows = $rows;
    $args->columns = $columns;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRowsWithColumnsTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRowsWithColumnsTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRowsWithColumnsTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_getRowsWithColumnsTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_getRowsWithColumnsTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("getRowsWithColumnsTs failed: unknown result");
  }

  public function mutateRow($tableName, $row, $mutations)
  {
    $this->send_mutateRow($tableName, $row, $mutations);
    $this->recv_mutateRow();
  }

  public function send_mutateRow($tableName, $row, $mutations)
  {
    $args = new Hbase_mutateRow_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->mutations = $mutations;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mutateRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mutateRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mutateRow()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_mutateRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_mutateRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    return;
  }

  public function mutateRowTs($tableName, $row, $mutations, $timestamp)
  {
    $this->send_mutateRowTs($tableName, $row, $mutations, $timestamp);
    $this->recv_mutateRowTs();
  }

  public function send_mutateRowTs($tableName, $row, $mutations, $timestamp)
  {
    $args = new Hbase_mutateRowTs_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->mutations = $mutations;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mutateRowTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mutateRowTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mutateRowTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_mutateRowTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_mutateRowTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    return;
  }

  public function mutateRows($tableName, $rowBatches)
  {
    $this->send_mutateRows($tableName, $rowBatches);
    $this->recv_mutateRows();
  }

  public function send_mutateRows($tableName, $rowBatches)
  {
    $args = new Hbase_mutateRows_args();
    $args->tableName = $tableName;
    $args->rowBatches = $rowBatches;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mutateRows', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mutateRows', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mutateRows()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_mutateRows_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_mutateRows_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    return;
  }

  public function mutateRowsTs($tableName, $rowBatches, $timestamp)
  {
    $this->send_mutateRowsTs($tableName, $rowBatches, $timestamp);
    $this->recv_mutateRowsTs();
  }

  public function send_mutateRowsTs($tableName, $rowBatches, $timestamp)
  {
    $args = new Hbase_mutateRowsTs_args();
    $args->tableName = $tableName;
    $args->rowBatches = $rowBatches;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mutateRowsTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mutateRowsTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mutateRowsTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_mutateRowsTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_mutateRowsTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    return;
  }

  public function atomicIncrement($tableName, $row, $column, $value)
  {
    $this->send_atomicIncrement($tableName, $row, $column, $value);
    return $this->recv_atomicIncrement();
  }

  public function send_atomicIncrement($tableName, $row, $column, $value)
  {
    $args = new Hbase_atomicIncrement_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->column = $column;
    $args->value = $value;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'atomicIncrement', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('atomicIncrement', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_atomicIncrement()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_atomicIncrement_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_atomicIncrement_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    throw new Exception("atomicIncrement failed: unknown result");
  }

  public function deleteAll($tableName, $row, $column)
  {
    $this->send_deleteAll($tableName, $row, $column);
    $this->recv_deleteAll();
  }

  public function send_deleteAll($tableName, $row, $column)
  {
    $args = new Hbase_deleteAll_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->column = $column;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteAll', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteAll', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteAll()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_deleteAll_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_deleteAll_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function deleteAllTs($tableName, $row, $column, $timestamp)
  {
    $this->send_deleteAllTs($tableName, $row, $column, $timestamp);
    $this->recv_deleteAllTs();
  }

  public function send_deleteAllTs($tableName, $row, $column, $timestamp)
  {
    $args = new Hbase_deleteAllTs_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->column = $column;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteAllTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteAllTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteAllTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_deleteAllTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_deleteAllTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function deleteAllRow($tableName, $row)
  {
    $this->send_deleteAllRow($tableName, $row);
    $this->recv_deleteAllRow();
  }

  public function send_deleteAllRow($tableName, $row)
  {
    $args = new Hbase_deleteAllRow_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteAllRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteAllRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteAllRow()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_deleteAllRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_deleteAllRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function deleteAllRowTs($tableName, $row, $timestamp)
  {
    $this->send_deleteAllRowTs($tableName, $row, $timestamp);
    $this->recv_deleteAllRowTs();
  }

  public function send_deleteAllRowTs($tableName, $row, $timestamp)
  {
    $args = new Hbase_deleteAllRowTs_args();
    $args->tableName = $tableName;
    $args->row = $row;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteAllRowTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteAllRowTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteAllRowTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_deleteAllRowTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_deleteAllRowTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    return;
  }

  public function scannerOpen($tableName, $startRow, $columns)
  {
    $this->send_scannerOpen($tableName, $startRow, $columns);
    return $this->recv_scannerOpen();
  }

  public function send_scannerOpen($tableName, $startRow, $columns)
  {
    $args = new Hbase_scannerOpen_args();
    $args->tableName = $tableName;
    $args->startRow = $startRow;
    $args->columns = $columns;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerOpen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerOpen', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerOpen()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerOpen_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerOpen_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("scannerOpen failed: unknown result");
  }

  public function scannerOpenWithStop($tableName, $startRow, $stopRow, $columns)
  {
    $this->send_scannerOpenWithStop($tableName, $startRow, $stopRow, $columns);
    return $this->recv_scannerOpenWithStop();
  }

  public function send_scannerOpenWithStop($tableName, $startRow, $stopRow, $columns)
  {
    $args = new Hbase_scannerOpenWithStop_args();
    $args->tableName = $tableName;
    $args->startRow = $startRow;
    $args->stopRow = $stopRow;
    $args->columns = $columns;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerOpenWithStop', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerOpenWithStop', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerOpenWithStop()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerOpenWithStop_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerOpenWithStop_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("scannerOpenWithStop failed: unknown result");
  }

  public function scannerOpenWithPrefix($tableName, $startAndPrefix, $columns)
  {
    $this->send_scannerOpenWithPrefix($tableName, $startAndPrefix, $columns);
    return $this->recv_scannerOpenWithPrefix();
  }

  public function send_scannerOpenWithPrefix($tableName, $startAndPrefix, $columns)
  {
    $args = new Hbase_scannerOpenWithPrefix_args();
    $args->tableName = $tableName;
    $args->startAndPrefix = $startAndPrefix;
    $args->columns = $columns;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerOpenWithPrefix', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerOpenWithPrefix', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerOpenWithPrefix()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerOpenWithPrefix_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerOpenWithPrefix_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("scannerOpenWithPrefix failed: unknown result");
  }

  public function scannerOpenTs($tableName, $startRow, $columns, $timestamp)
  {
    $this->send_scannerOpenTs($tableName, $startRow, $columns, $timestamp);
    return $this->recv_scannerOpenTs();
  }

  public function send_scannerOpenTs($tableName, $startRow, $columns, $timestamp)
  {
    $args = new Hbase_scannerOpenTs_args();
    $args->tableName = $tableName;
    $args->startRow = $startRow;
    $args->columns = $columns;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerOpenTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerOpenTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerOpenTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerOpenTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerOpenTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("scannerOpenTs failed: unknown result");
  }

  public function scannerOpenWithStopTs($tableName, $startRow, $stopRow, $columns, $timestamp)
  {
    $this->send_scannerOpenWithStopTs($tableName, $startRow, $stopRow, $columns, $timestamp);
    return $this->recv_scannerOpenWithStopTs();
  }

  public function send_scannerOpenWithStopTs($tableName, $startRow, $stopRow, $columns, $timestamp)
  {
    $args = new Hbase_scannerOpenWithStopTs_args();
    $args->tableName = $tableName;
    $args->startRow = $startRow;
    $args->stopRow = $stopRow;
    $args->columns = $columns;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerOpenWithStopTs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerOpenWithStopTs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerOpenWithStopTs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerOpenWithStopTs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerOpenWithStopTs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    throw new Exception("scannerOpenWithStopTs failed: unknown result");
  }

  public function scannerGet($id)
  {
    $this->send_scannerGet($id);
    return $this->recv_scannerGet();
  }

  public function send_scannerGet($id)
  {
    $args = new Hbase_scannerGet_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    throw new Exception("scannerGet failed: unknown result");
  }

  public function scannerGetList($id, $nbRows)
  {
    $this->send_scannerGetList($id, $nbRows);
    return $this->recv_scannerGetList();
  }

  public function send_scannerGetList($id, $nbRows)
  {
    $args = new Hbase_scannerGetList_args();
    $args->id = $id;
    $args->nbRows = $nbRows;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerGetList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerGetList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerGetList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerGetList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerGetList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    throw new Exception("scannerGetList failed: unknown result");
  }

  public function scannerClose($id)
  {
    $this->send_scannerClose($id);
    $this->recv_scannerClose();
  }

  public function send_scannerClose($id)
  {
    $args = new Hbase_scannerClose_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'scannerClose', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('scannerClose', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_scannerClose()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Hbase_scannerClose_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new Hbase_scannerClose_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->io !== null) {
      throw $result->io;
    }
    if ($result->ia !== null) {
      throw $result->ia;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Hbase_enableTable_args extends TBase {
  static $_TSPEC;

  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_enableTable_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_enableTable_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_enableTable_args', self::$_TSPEC, $output);
  }
}

class Hbase_enableTable_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_enableTable_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_enableTable_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_enableTable_result', self::$_TSPEC, $output);
  }
}

class Hbase_disableTable_args extends TBase {
  static $_TSPEC;

  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_disableTable_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_disableTable_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_disableTable_args', self::$_TSPEC, $output);
  }
}

class Hbase_disableTable_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_disableTable_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_disableTable_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_disableTable_result', self::$_TSPEC, $output);
  }
}

class Hbase_isTableEnabled_args extends TBase {
  static $_TSPEC;

  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_isTableEnabled_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_isTableEnabled_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_isTableEnabled_args', self::$_TSPEC, $output);
  }
}

class Hbase_isTableEnabled_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_isTableEnabled_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_isTableEnabled_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_isTableEnabled_result', self::$_TSPEC, $output);
  }
}

class Hbase_compact_args extends TBase {
  static $_TSPEC;

  public $tableNameOrRegionName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableNameOrRegionName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_compact_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_compact_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_compact_args', self::$_TSPEC, $output);
  }
}

class Hbase_compact_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_compact_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_compact_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_compact_result', self::$_TSPEC, $output);
  }
}

class Hbase_majorCompact_args extends TBase {
  static $_TSPEC;

  public $tableNameOrRegionName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableNameOrRegionName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_majorCompact_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_majorCompact_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_majorCompact_args', self::$_TSPEC, $output);
  }
}

class Hbase_majorCompact_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_majorCompact_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_majorCompact_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_majorCompact_result', self::$_TSPEC, $output);
  }
}

class Hbase_getTableNames_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Hbase_getTableNames_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getTableNames_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getTableNames_args', self::$_TSPEC, $output);
  }
}

class Hbase_getTableNames_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getTableNames_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getTableNames_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getTableNames_result', self::$_TSPEC, $output);
  }
}

class Hbase_getColumnDescriptors_args extends TBase {
  static $_TSPEC;

  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getColumnDescriptors_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getColumnDescriptors_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getColumnDescriptors_args', self::$_TSPEC, $output);
  }
}

class Hbase_getColumnDescriptors_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'ColumnDescriptor',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getColumnDescriptors_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getColumnDescriptors_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getColumnDescriptors_result', self::$_TSPEC, $output);
  }
}

class Hbase_getTableRegions_args extends TBase {
  static $_TSPEC;

  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getTableRegions_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getTableRegions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getTableRegions_args', self::$_TSPEC, $output);
  }
}

class Hbase_getTableRegions_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRegionInfo',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getTableRegions_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getTableRegions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getTableRegions_result', self::$_TSPEC, $output);
  }
}

class Hbase_createTable_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $columnFamilies = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columnFamilies',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'ColumnDescriptor',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_createTable_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_createTable_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_createTable_args', self::$_TSPEC, $output);
  }
}

class Hbase_createTable_result extends TBase {
  static $_TSPEC;

  public $io = null;
  public $ia = null;
  public $exist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        3 => array(
          'var' => 'exist',
          'type' => TType::STRUCT,
          'class' => 'AlreadyExists',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_createTable_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_createTable_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_createTable_result', self::$_TSPEC, $output);
  }
}

class Hbase_deleteTable_args extends TBase {
  static $_TSPEC;

  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteTable_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteTable_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteTable_args', self::$_TSPEC, $output);
  }
}

class Hbase_deleteTable_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteTable_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteTable_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteTable_result', self::$_TSPEC, $output);
  }
}

class Hbase_get_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_get_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_get_args', self::$_TSPEC, $output);
  }
}

class Hbase_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TCell',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_get_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_get_result', self::$_TSPEC, $output);
  }
}

class Hbase_getVer_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $column = null;
  public $numVersions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'numVersions',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getVer_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getVer_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getVer_args', self::$_TSPEC, $output);
  }
}

class Hbase_getVer_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TCell',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getVer_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getVer_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getVer_result', self::$_TSPEC, $output);
  }
}

class Hbase_getVerTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $column = null;
  public $timestamp = null;
  public $numVersions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'numVersions',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getVerTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getVerTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getVerTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_getVerTs_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TCell',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getVerTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getVerTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getVerTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRow_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRow_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRow_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRow_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRow_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRow_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRow_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRow_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRowWithColumns_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowWithColumns_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowWithColumns_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowWithColumns_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRowWithColumns_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowWithColumns_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowWithColumns_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowWithColumns_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRowTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRowTs_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRowWithColumnsTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $columns = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowWithColumnsTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowWithColumnsTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowWithColumnsTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRowWithColumnsTs_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowWithColumnsTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowWithColumnsTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowWithColumnsTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRows_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $rows = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rows',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRows_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRows_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRows_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRows_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRows_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRows_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRows_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRowsWithColumns_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $rows = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rows',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowsWithColumns_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowsWithColumns_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowsWithColumns_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRowsWithColumns_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowsWithColumns_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowsWithColumns_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowsWithColumns_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRowsTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $rows = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rows',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowsTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowsTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowsTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRowsTs_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowsTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowsTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowsTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_getRowsWithColumnsTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $rows = null;
  public $columns = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rows',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowsWithColumnsTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowsWithColumnsTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowsWithColumnsTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_getRowsWithColumnsTs_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_getRowsWithColumnsTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_getRowsWithColumnsTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_getRowsWithColumnsTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRow_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $mutations = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mutations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Mutation',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRow_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRow_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRow_args', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRow_result extends TBase {
  static $_TSPEC;

  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRow_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRow_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRow_result', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRowTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $mutations = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mutations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Mutation',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRowTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRowTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRowTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRowTs_result extends TBase {
  static $_TSPEC;

  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRowTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRowTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRowTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRows_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $rowBatches = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rowBatches',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'BatchMutation',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRows_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRows_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRows_args', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRows_result extends TBase {
  static $_TSPEC;

  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRows_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRows_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRows_result', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRowsTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $rowBatches = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rowBatches',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'BatchMutation',
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRowsTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRowsTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRowsTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_mutateRowsTs_result extends TBase {
  static $_TSPEC;

  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_mutateRowsTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_mutateRowsTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_mutateRowsTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_atomicIncrement_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $column = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'value',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_atomicIncrement_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_atomicIncrement_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_atomicIncrement_args', self::$_TSPEC, $output);
  }
}

class Hbase_atomicIncrement_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_atomicIncrement_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_atomicIncrement_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_atomicIncrement_result', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAll_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAll_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAll_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAll_args', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAll_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAll_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAll_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAll_result', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAllTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $column = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAllTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAllTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAllTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAllTs_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAllTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAllTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAllTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAllRow_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAllRow_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAllRow_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAllRow_args', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAllRow_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAllRow_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAllRow_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAllRow_result', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAllRowTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $row = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAllRowTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAllRowTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAllRowTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_deleteAllRowTs_result extends TBase {
  static $_TSPEC;

  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_deleteAllRowTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_deleteAllRowTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_deleteAllRowTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpen_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $startRow = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startRow',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpen_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpen_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpen_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpen_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpen_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpen_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpen_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenWithStop_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $startRow = null;
  public $stopRow = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startRow',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'stopRow',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenWithStop_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenWithStop_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenWithStop_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenWithStop_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenWithStop_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenWithStop_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenWithStop_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenWithPrefix_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $startAndPrefix = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startAndPrefix',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenWithPrefix_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenWithPrefix_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenWithPrefix_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenWithPrefix_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenWithPrefix_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenWithPrefix_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenWithPrefix_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $startRow = null;
  public $columns = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startRow',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenTs_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenWithStopTs_args extends TBase {
  static $_TSPEC;

  public $tableName = null;
  public $startRow = null;
  public $stopRow = null;
  public $columns = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startRow',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'stopRow',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenWithStopTs_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenWithStopTs_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenWithStopTs_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerOpenWithStopTs_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerOpenWithStopTs_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerOpenWithStopTs_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerOpenWithStopTs_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerGet_args extends TBase {
  static $_TSPEC;

  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerGet_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerGet_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerGet_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerGet_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerGet_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerGet_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerGet_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerGetList_args extends TBase {
  static $_TSPEC;

  public $id = null;
  public $nbRows = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nbRows',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerGetList_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerGetList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerGetList_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerGetList_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'TRowResult',
            ),
          ),
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerGetList_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerGetList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerGetList_result', self::$_TSPEC, $output);
  }
}

class Hbase_scannerClose_args extends TBase {
  static $_TSPEC;

  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerClose_args';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerClose_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerClose_args', self::$_TSPEC, $output);
  }
}

class Hbase_scannerClose_result extends TBase {
  static $_TSPEC;

  public $io = null;
  public $ia = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'io',
          'type' => TType::STRUCT,
          'class' => 'IOError',
          ),
        2 => array(
          'var' => 'ia',
          'type' => TType::STRUCT,
          'class' => 'IllegalArgument',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Hbase_scannerClose_result';
  }

  public function read($input)
  {
    return $this->_read('Hbase_scannerClose_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Hbase_scannerClose_result', self::$_TSPEC, $output);
  }
}

?>
