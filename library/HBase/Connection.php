<?php

require_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TTransport.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TSocket.php';
require_once $GLOBALS['THRIFT_ROOT'].'/protocol/TBinaryProtocol.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TFramedTransport.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TBufferedTransport.php';

require_once $GLOBALS['THRIFT_ROOT'].'/packages/Hbase/Hbase.php';
require_once $GLOBALS['THRIFT_ROOT'].'/packages/Hbase/Hbase_types.php';

class HBase_Connection implements HbaseIf
{
	protected $_host;
	protected $_port;
	protected $_sendTimeout;
	protected $_recvTimeout;

	/** @var $_transport TBufferedTransport */
	protected $_transport;
	/** @var $_client HbaseClient */
	protected $_client;

	protected $isOpened = false;

	public function __construct($host, $port, $sendTimeout, $recvTimeout)
	{
		//TODO add more sophisticated validation
		if ($host && $port && $sendTimeout && $recvTimeout)
		{
			$this->_host = $host;
			$this->_port = $port;
			$this->_sendTimeout = $sendTimeout;
			$this->_recvTimeout = $recvTimeout;
		}
		else
		{
			throw new Exception('HBase connection arguments should not be empty.');
		}
	}

	public function open()
	{
		if (!$this->isOpened)
		{
			try
			{
				$socket = new TSocket($this->_host, $this->_port);
				$socket->setSendTimeout($this->_sendTimeout);
				$socket->setRecvTimeout($this->_recvTimeout);
				$this->_transport = new TBufferedTransport($socket);
				$protocol = new TBinaryProtocol($this->_transport);
				$this->_client = new HbaseClient($protocol);
				$this->_transport->open();
				$this->isOpened = true;
			}
			catch (Exception $e)
			{
				$this->_transport = null;
				$this->_client = null;
				$this->isOpened = false;
				throw $e;
			}
		}
	}

	public function flush()
	{
		if ($this->isOpened)
		{
			$this->_transport->flush();
		}
	}

	public function close($silent = false)
	{
		if ($this->isOpened)
		{
			$this->isOpened = false;
			$this->_client = null;
			try
			{
				$this->_transport->close();
			} 
			catch (Exception $e)
			{
				$this->_transport = null;
				if (!$silent)
				{
					throw $e;
				}
			}
		}
	}

	public function __destruct()
	{
		$this->close(true);
	}

//Implementation of HbaseIf autogenerated by regular expression replacement

	public function enableTable($tableName)
	{
		$this->open();
		return $this->_client->enableTable($tableName);
	}

	public function disableTable($tableName)
	{
		$this->open();
		return $this->_client->disableTable($tableName);
	}

	public function isTableEnabled($tableName)
	{
		$this->open();
		return $this->_client->isTableEnabled($tableName);
	}

	public function compact($tableNameOrRegionName)
	{
		$this->open();
		return $this->_client->compact($tableNameOrRegionName);
	}

	public function majorCompact($tableNameOrRegionName)
	{
		$this->open();
		return $this->_client->majorCompact($tableNameOrRegionName);
	}

	public function getTableNames()
	{
		$this->open();
		return $this->_client->getTableNames();
	}

	public function getColumnDescriptors($tableName)
	{
		$this->open();
		return $this->_client->getColumnDescriptors($tableName);
	}

	public function getTableRegions($tableName)
	{
		$this->open();
		return $this->_client->getTableRegions($tableName);
	}

	public function createTable($tableName, $columnFamilies)
	{
		$this->open();
		return $this->_client->createTable($tableName, $columnFamilies);
	}

	public function deleteTable($tableName)
	{
		$this->open();
		return $this->_client->deleteTable($tableName);
	}

	public function get($tableName, $row, $column)
	{
		$this->open();
		return $this->_client->get($tableName, $row, $column);
	}

	public function getVer($tableName, $row, $column, $numVersions)
	{
		$this->open();
		return $this->_client->getVer($tableName, $row, $column, $numVersions);
	}

	public function getVerTs($tableName, $row, $column, $timestamp, $numVersions)
	{
		$this->open();
		return $this->_client->getVerTs($tableName, $row, $column, $timestamp, $numVersions);
	}

	public function getRow($tableName, $row)
	{
		$this->open();
		return $this->_client->getRow($tableName, $row);
	}

	public function getRowWithColumns($tableName, $row, $columns)
	{
		$this->open();
		return $this->_client->getRowWithColumns($tableName, $row, $columns);
	}

	public function getRowTs($tableName, $row, $timestamp)
	{
		$this->open();
		return $this->_client->getRowTs($tableName, $row, $timestamp);
	}

	public function getRowWithColumnsTs($tableName, $row, $columns, $timestamp)
	{
		$this->open();
		return $this->_client->getRowWithColumnsTs($tableName, $row, $columns, $timestamp);
	}

	public function getRows($tableName, $rows)
	{
		$this->open();
		return $this->_client->getRows($tableName, $rows);
	}

	public function getRowsWithColumns($tableName, $rows, $columns)
	{
		$this->open();
		return $this->_client->getRowsWithColumns($tableName, $rows, $columns);
	}

	public function getRowsTs($tableName, $rows, $timestamp)
	{
		$this->open();
		return $this->_client->getRowsTs($tableName, $rows, $timestamp);
	}

	public function getRowsWithColumnsTs($tableName, $rows, $columns, $timestamp)
	{
		$this->open();
		return $this->_client->getRowsWithColumnsTs($tableName, $rows, $columns, $timestamp);
	}

	public function mutateRow($tableName, $row, $mutations)
	{
		$this->open();
		return $this->_client->mutateRow($tableName, $row, $mutations);
	}

	public function mutateRowTs($tableName, $row, $mutations, $timestamp)
	{
		$this->open();
		return $this->_client->mutateRowTs($tableName, $row, $mutations, $timestamp);
	}

	public function mutateRows($tableName, $rowBatches)
	{
		$this->open();
		return $this->_client->mutateRows($tableName, $rowBatches);
	}

	public function mutateRowsTs($tableName, $rowBatches, $timestamp)
	{
		$this->open();
		return $this->_client->mutateRowsTs($tableName, $rowBatches, $timestamp);
	}

	public function atomicIncrement($tableName, $row, $column, $value)
	{
		$this->open();
		return $this->_client->atomicIncrement($tableName, $row, $column, $value);
	}

	public function deleteAll($tableName, $row, $column)
	{
		$this->open();
		return $this->_client->deleteAll($tableName, $row, $column);
	}

	public function deleteAllTs($tableName, $row, $column, $timestamp)
	{
		$this->open();
		return $this->_client->deleteAllTs($tableName, $row, $column, $timestamp);
	}

	public function deleteAllRow($tableName, $row)
	{
		$this->open();
		return $this->_client->deleteAllRow($tableName, $row);
	}

	public function deleteAllRowTs($tableName, $row, $timestamp)
	{
		$this->open();
		return $this->_client->deleteAllRowTs($tableName, $row, $timestamp);
	}

	public function scannerOpen($tableName, $startRow, $columns)
	{
		$this->open();
		return $this->_client->scannerOpen($tableName, $startRow, $columns);
	}

	public function scannerOpenWithStop($tableName, $startRow, $stopRow, $columns)
	{
		$this->open();
		return $this->_client->scannerOpenWithStop($tableName, $startRow, $stopRow, $columns);
	}

	public function scannerOpenWithPrefix($tableName, $startAndPrefix, $columns)
	{
		$this->open();
		return $this->_client->scannerOpenWithPrefix($tableName, $startAndPrefix, $columns);
	}

	public function scannerOpenTs($tableName, $startRow, $columns, $timestamp)
	{
		$this->open();
		return $this->_client->scannerOpenTs($tableName, $startRow, $columns, $timestamp);
	}

	public function scannerOpenWithStopTs($tableName, $startRow, $stopRow, $columns, $timestamp)
	{
		$this->open();
		return $this->_client->scannerOpenWithStopTs($tableName, $startRow, $stopRow, $columns, $timestamp);
	}

	public function scannerGet($id)
	{
		$this->open();
		return $this->_client->scannerGet($id);
	}

	public function scannerGetList($id, $nbRows)
	{
		$this->open();
		return $this->_client->scannerGetList($id, $nbRows);
	}

	public function scannerClose($id)
	{
		$this->open();
		return $this->_client->scannerClose($id);
	}
}
